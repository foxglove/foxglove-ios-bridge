// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/LocationFix.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A navigation satellite fix for any Global Navigation Satellite System
struct Foxglove_LocationFix {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp of the message
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get { _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
    set { _timestamp = newValue }
  }

  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool { _timestamp != nil }
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() { _timestamp = nil }

  /// Frame for the sensor. Latitude and longitude readings are at the origin of the frame.
  var frameID: String = .init()

  /// Latitude in degrees
  var latitude: Double = 0

  /// Longitude in degrees
  var longitude: Double = 0

  /// Altitude in meters
  var altitude: Double = 0

  /// Position covariance (m^2) defined relative to a tangential plane through the reported position. The components are
  /// East, North, and Up (ENU), in row-major order.
  var positionCovariance: [Double] = []

  /// If `position_covariance` is available, `position_covariance_type` must be set to indicate the type of covariance.
  var positionCovarianceType: Foxglove_LocationFix.PositionCovarianceType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of position covariance
  enum PositionCovarianceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case approximated // = 1
    case diagonalKnown // = 2
    case known // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .approximated
      case 2: self = .diagonalKnown
      case 3: self = .known
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: 0
      case .approximated: 1
      case .diagonalKnown: 2
      case .known: 3
      case let .UNRECOGNIZED(i): i
      }
    }
  }

  init() {}

  private var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp?
}

#if swift(>=4.2)

  extension Foxglove_LocationFix.PositionCovarianceType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Foxglove_LocationFix.PositionCovarianceType] = [
      .unknown,
      .approximated,
      .diagonalKnown,
      .known,
    ]
  }

#endif // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
  extension Foxglove_LocationFix: @unchecked Sendable {}
  extension Foxglove_LocationFix.PositionCovarianceType: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "foxglove"

extension Foxglove_LocationFix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
  SwiftProtobuf._ProtoNameProviding
{
  static let protoMessageName: String = _protobuf_package + ".LocationFix"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "timestamp"),
    7: .standard(proto: "frame_id"),
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .same(proto: "altitude"),
    4: .standard(proto: "position_covariance"),
    5: .standard(proto: "position_covariance_type"),
  ]

  mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &latitude)
      case 2: try decoder.decodeSingularDoubleField(value: &longitude)
      case 3: try decoder.decodeSingularDoubleField(value: &altitude)
      case 4: try decoder.decodeRepeatedDoubleField(value: &positionCovariance)
      case 5: try decoder.decodeSingularEnumField(value: &positionCovarianceType)
      case 6: try decoder.decodeSingularMessageField(value: &_timestamp)
      case 7: try decoder.decodeSingularStringField(value: &frameID)
      default: break
      }
    }
  }

  func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if latitude != 0 {
      try visitor.visitSingularDoubleField(value: latitude, fieldNumber: 1)
    }
    if longitude != 0 {
      try visitor.visitSingularDoubleField(value: longitude, fieldNumber: 2)
    }
    if altitude != 0 {
      try visitor.visitSingularDoubleField(value: altitude, fieldNumber: 3)
    }
    if !positionCovariance.isEmpty {
      try visitor.visitPackedDoubleField(value: positionCovariance, fieldNumber: 4)
    }
    if positionCovarianceType != .unknown {
      try visitor.visitSingularEnumField(value: positionCovarianceType, fieldNumber: 5)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !frameID.isEmpty {
      try visitor.visitSingularStringField(value: frameID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func == (lhs: Foxglove_LocationFix, rhs: Foxglove_LocationFix) -> Bool {
    if lhs._timestamp != rhs._timestamp { return false }
    if lhs.frameID != rhs.frameID { return false }
    if lhs.latitude != rhs.latitude { return false }
    if lhs.longitude != rhs.longitude { return false }
    if lhs.altitude != rhs.altitude { return false }
    if lhs.positionCovariance != rhs.positionCovariance { return false }
    if lhs.positionCovarianceType != rhs.positionCovarianceType { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension Foxglove_LocationFix.PositionCovarianceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "APPROXIMATED"),
    2: .same(proto: "DIAGONAL_KNOWN"),
    3: .same(proto: "KNOWN"),
  ]
}
