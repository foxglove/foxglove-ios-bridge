// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/FrameTransform.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A transform between two reference frames in 3D space
struct Foxglove_FrameTransform {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp of transform
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  /// Name of the parent frame
  var parentFrameID: String = String()

  /// Name of the child frame
  var childFrameID: String = String()

  /// Translation component of the transform
  var translation: Foxglove_Vector3 {
    get {return _translation ?? Foxglove_Vector3()}
    set {_translation = newValue}
  }
  /// Returns true if `translation` has been explicitly set.
  var hasTranslation: Bool {return self._translation != nil}
  /// Clears the value of `translation`. Subsequent reads from it will return its default value.
  mutating func clearTranslation() {self._translation = nil}

  /// Rotation component of the transform
  var rotation: Foxglove_Quaternion {
    get {return _rotation ?? Foxglove_Quaternion()}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  mutating func clearRotation() {self._rotation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _translation: Foxglove_Vector3? = nil
  fileprivate var _rotation: Foxglove_Quaternion? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Foxglove_FrameTransform: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "foxglove"

extension Foxglove_FrameTransform: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FrameTransform"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "parent_frame_id"),
    3: .standard(proto: "child_frame_id"),
    4: .same(proto: "translation"),
    5: .same(proto: "rotation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parentFrameID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.childFrameID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._translation) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rotation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.parentFrameID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentFrameID, fieldNumber: 2)
    }
    if !self.childFrameID.isEmpty {
      try visitor.visitSingularStringField(value: self.childFrameID, fieldNumber: 3)
    }
    try { if let v = self._translation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Foxglove_FrameTransform, rhs: Foxglove_FrameTransform) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.parentFrameID != rhs.parentFrameID {return false}
    if lhs.childFrameID != rhs.childFrameID {return false}
    if lhs._translation != rhs._translation {return false}
    if lhs._rotation != rhs._rotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
