// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/SceneEntityDeletion.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Command to remove previously published entities
struct Foxglove_SceneEntityDeletion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp of the deletion. Only matching entities earlier than this timestamp will be deleted.
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get { _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
    set { _timestamp = newValue }
  }

  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool { _timestamp != nil }
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() { _timestamp = nil }

  /// Type of deletion action to perform
  var type: Foxglove_SceneEntityDeletion.TypeEnum = .matchingID

  /// Identifier which must match if `type` is `MATCHING_ID`.
  var id: String = .init()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An enumeration indicating which entities should match a SceneEntityDeletion command
  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Delete the existing entity on the same topic that has the provided `id`
    case matchingID // = 0

    /// Delete all existing entities on the same topic
    case all // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .matchingID
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .matchingID
      case 1: self = .all
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .matchingID: 0
      case .all: 1
      case let .UNRECOGNIZED(i): i
      }
    }
  }

  init() {}

  private var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp?
}

#if swift(>=4.2)

  extension Foxglove_SceneEntityDeletion.TypeEnum: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Foxglove_SceneEntityDeletion.TypeEnum] = [
      .matchingID,
      .all,
    ]
  }

#endif // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
  extension Foxglove_SceneEntityDeletion: @unchecked Sendable {}
  extension Foxglove_SceneEntityDeletion.TypeEnum: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "foxglove"

extension Foxglove_SceneEntityDeletion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
  SwiftProtobuf._ProtoNameProviding
{
  static let protoMessageName: String = _protobuf_package + ".SceneEntityDeletion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "type"),
    3: .same(proto: "id"),
  ]

  mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_timestamp)
      case 2: try decoder.decodeSingularEnumField(value: &type)
      case 3: try decoder.decodeSingularStringField(value: &id)
      default: break
      }
    }
  }

  func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if let v = _timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if type != .matchingID {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 2)
    }
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func == (lhs: Foxglove_SceneEntityDeletion, rhs: Foxglove_SceneEntityDeletion) -> Bool {
    if lhs._timestamp != rhs._timestamp { return false }
    if lhs.type != rhs.type { return false }
    if lhs.id != rhs.id { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}

extension Foxglove_SceneEntityDeletion.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MATCHING_ID"),
    1: .same(proto: "ALL"),
  ]
}
