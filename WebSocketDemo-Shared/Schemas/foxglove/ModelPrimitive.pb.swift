// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/ModelPrimitive.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A primitive representing a 3D model file loaded from an external URL or embedded data
struct Foxglove_ModelPrimitive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Origin of model relative to reference frame
  var pose: Foxglove_Pose {
    get { _storage._pose ?? Foxglove_Pose() }
    set { _uniqueStorage()._pose = newValue }
  }

  /// Returns true if `pose` has been explicitly set.
  var hasPose: Bool { _storage._pose != nil }
  /// Clears the value of `pose`. Subsequent reads from it will return its default value.
  mutating func clearPose() { _uniqueStorage()._pose = nil }

  /// Scale factor to apply to the model along each axis
  var scale: Foxglove_Vector3 {
    get { _storage._scale ?? Foxglove_Vector3() }
    set { _uniqueStorage()._scale = newValue }
  }

  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool { _storage._scale != nil }
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() { _uniqueStorage()._scale = nil }

  /// Solid color to use for the whole model if `override_color` is true.
  var color: Foxglove_Color {
    get { _storage._color ?? Foxglove_Color() }
    set { _uniqueStorage()._color = newValue }
  }

  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool { _storage._color != nil }
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() { _uniqueStorage()._color = nil }

  /// Whether to use the color specified in `color` instead of any materials embedded in the original model.
  var overrideColor: Bool {
    get { _storage._overrideColor }
    set { _uniqueStorage()._overrideColor = newValue }
  }

  /// URL pointing to model file. One of `url` or `data` should be provided.
  var url: String {
    get { _storage._url }
    set { _uniqueStorage()._url = newValue }
  }

  /// [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g.
  /// `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url`
  /// is provided.
  var mediaType: String {
    get { _storage._mediaType }
    set { _uniqueStorage()._mediaType = newValue }
  }

  /// Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to
  /// indicate the type of the data.
  var data: Data {
    get { _storage._data }
    set { _uniqueStorage()._data = newValue }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  private var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
  extension Foxglove_ModelPrimitive: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "foxglove"

extension Foxglove_ModelPrimitive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
  SwiftProtobuf._ProtoNameProviding
{
  static let protoMessageName: String = _protobuf_package + ".ModelPrimitive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pose"),
    2: .same(proto: "scale"),
    3: .same(proto: "color"),
    4: .standard(proto: "override_color"),
    5: .same(proto: "url"),
    6: .standard(proto: "media_type"),
    7: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _pose: Foxglove_Pose?
    var _scale: Foxglove_Vector3?
    var _color: Foxglove_Color?
    var _overrideColor: Bool = false
    var _url: String = .init()
    var _mediaType: String = .init()
    var _data: Data = .init()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pose = source._pose
      _scale = source._scale
      _color = source._color
      _overrideColor = source._overrideColor
      _url = source._url
      _mediaType = source._mediaType
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pose)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._scale)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._overrideColor)
        case 5: try decoder.decodeSingularStringField(value: &_storage._url)
        case 6: try decoder.decodeSingularStringField(value: &_storage._mediaType)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._data)
        default: break
        }
      }
    }
  }

  func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._pose {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._scale {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._overrideColor != false {
        try visitor.visitSingularBoolField(value: _storage._overrideColor, fieldNumber: 4)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 5)
      }
      if !_storage._mediaType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaType, fieldNumber: 6)
      }
      if !_storage._data.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._data, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func == (lhs: Foxglove_ModelPrimitive, rhs: Foxglove_ModelPrimitive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((
        lhs._storage,
        rhs._storage
      )) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pose != rhs_storage._pose { return false }
        if _storage._scale != rhs_storage._scale { return false }
        if _storage._color != rhs_storage._color { return false }
        if _storage._overrideColor != rhs_storage._overrideColor { return false }
        if _storage._url != rhs_storage._url { return false }
        if _storage._mediaType != rhs_storage._mediaType { return false }
        if _storage._data != rhs_storage._data { return false }
        return true
      }
      if !storagesAreEqual { return false }
    }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}
