// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/Color.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A color in RGBA format
struct Foxglove_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Red value between 0 and 1
  var r: Double = 0

  /// Green value between 0 and 1
  var g: Double = 0

  /// Blue value between 0 and 1
  var b: Double = 0

  /// Alpha value between 0 and 1
  var a: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
  extension Foxglove_Color: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "foxglove"

extension Foxglove_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
  SwiftProtobuf._ProtoNameProviding
{
  static let protoMessageName: String = _protobuf_package + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r"),
    2: .same(proto: "g"),
    3: .same(proto: "b"),
    4: .same(proto: "a"),
  ]

  mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &r)
      case 2: try decoder.decodeSingularDoubleField(value: &g)
      case 3: try decoder.decodeSingularDoubleField(value: &b)
      case 4: try decoder.decodeSingularDoubleField(value: &a)
      default: break
      }
    }
  }

  func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
    if r != 0 {
      try visitor.visitSingularDoubleField(value: r, fieldNumber: 1)
    }
    if g != 0 {
      try visitor.visitSingularDoubleField(value: g, fieldNumber: 2)
    }
    if b != 0 {
      try visitor.visitSingularDoubleField(value: b, fieldNumber: 3)
    }
    if a != 0 {
      try visitor.visitSingularDoubleField(value: a, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func == (lhs: Foxglove_Color, rhs: Foxglove_Color) -> Bool {
    if lhs.r != rhs.r { return false }
    if lhs.g != rhs.g { return false }
    if lhs.b != rhs.b { return false }
    if lhs.a != rhs.a { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}
