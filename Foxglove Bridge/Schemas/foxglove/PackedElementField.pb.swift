// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: foxglove/PackedElementField.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Generated by https://github.com/foxglove/schemas

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A field present within each element in a byte array of packed elements.
struct Foxglove_PackedElementField {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the field
  var name: String = String()

  /// Byte offset from start of data buffer
  var offset: UInt32 = 0

  /// Type of data in the field. Integers are stored using little-endian byte order.
  var type: Foxglove_PackedElementField.NumericType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Numeric type
  enum NumericType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case uint8 // = 1
    case int8 // = 2
    case uint16 // = 3
    case int16 // = 4
    case uint32 // = 5
    case int32 // = 6
    case float32 // = 7
    case float64 // = 8
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .uint8
      case 2: self = .int8
      case 3: self = .uint16
      case 4: self = .int16
      case 5: self = .uint32
      case 6: self = .int32
      case 7: self = .float32
      case 8: self = .float64
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .uint8: return 1
      case .int8: return 2
      case .uint16: return 3
      case .int16: return 4
      case .uint32: return 5
      case .int32: return 6
      case .float32: return 7
      case .float64: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Foxglove_PackedElementField.NumericType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Foxglove_PackedElementField.NumericType] = [
    .unknown,
    .uint8,
    .int8,
    .uint16,
    .int16,
    .uint32,
    .int32,
    .float32,
    .float64,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Foxglove_PackedElementField: @unchecked Sendable {}
extension Foxglove_PackedElementField.NumericType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "foxglove"

extension Foxglove_PackedElementField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PackedElementField"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "offset"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularFixed32Field(value: self.offset, fieldNumber: 2)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Foxglove_PackedElementField, rhs: Foxglove_PackedElementField) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Foxglove_PackedElementField.NumericType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "UINT8"),
    2: .same(proto: "INT8"),
    3: .same(proto: "UINT16"),
    4: .same(proto: "INT16"),
    5: .same(proto: "UINT32"),
    6: .same(proto: "INT32"),
    7: .same(proto: "FLOAT32"),
    8: .same(proto: "FLOAT64"),
  ]
}
